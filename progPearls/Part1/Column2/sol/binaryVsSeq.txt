Mathematically speaking, we want to know the number i for which n*log(n)+i*log(n) <= i*n. i represents how many binary searches have to be made to start taking advantage of time savings when compared with i sequential searches.
Binary search requires that the array be sorted, this takes n*log(n) time. We only need to sort the array once, so, i binary searches will take n*log(n)+i*log(n) time, and i sequential searches take i*n time.
Solving the inequality 

n*log(n)+i*log(n) <= i*n 
n*log(n) <= i*(n-log(n))
(n*log(n)) / (n-log(n)) <= i

This means that after (n*log(n))/(n-log(n)) binary searches, the overall spent time starts decreasing when compared to the alternative solution of doing sequential search.
