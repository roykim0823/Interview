// C++ implementation of disjoint set 
#include <iostream> 
using namespace std; 
class DisjSet { 
	int *rank, *parent, n; 

public: 
	// Constructor to create and 
	// initialize sets of n items 
	DisjSet(int n) 
	{ 
		rank = new int[n]; 
		parent = new int[n]; 
		this->n = n; 
		makeSet(); 
	} 

	// Creates n single item sets 
	void makeSet() 
	{ 
		for (int i = 0; i < n; i++) { 
			parent[i] = i; 
		} 
	} 

	// Finds set of given item x 
	int find(int x) 
	{ 
		// Finds the representative of the set 
		// that x is an element of 
		if (parent[x] != x) { 

			// if x is not the parent of itself 
			// Then x is not the representative of 
			// his set, 
			parent[x] = find(parent[x]); 

			// so we recursively call Find on its parent 
			// and move i's node directly under the 
			// representative of this set 
		} 

		return parent[x]; 
	} 

	// Do union of two sets represented 
	// by x and y. 
	void Union(int x, int y) 
	{ 
		// Find current sets of x and y 
		int xset = find(x); 
		int yset = find(y); 

		// If they are already in same set 
		if (xset == yset) 
			return; 

		// Put smaller ranked item under 
		// bigger ranked item if ranks are 
		// different 
		if (rank[xset] < rank[yset]) { 
			parent[xset] = yset; 
		} 
		else if (rank[xset] > rank[yset]) { 
			parent[yset] = xset; 
		} 

		// If ranks are same, then increment 
		// rank. 
		else { 
			parent[yset] = xset; 
			rank[xset] = rank[xset] + 1; 
		} 
	} 
}; 

int main() 
{ 
	DisjSet obj(5); 
	obj.Union(0, 2); 
	obj.Union(4, 2); 
	obj.Union(3, 1); 
	if (obj.find(4) == obj.find(0)) 
		cout << "Yes\n"; 
	else
		cout << "No\n"; 
	if (obj.find(1) == obj.find(0)) 
		cout << "Yes\n"; 
	else
		cout << "No\n"; 

	return 0; 
} 
//--------------------------------------------------------------------------------------------
// C++ program to print connected components in 
// an undirected graph 
#include<iostream> 
#include <list> 
using namespace std; 

// Graph class represents a undirected graph 
// using adjacency list representation 
class Graph 
{ 
	int V; // No. of vertices 

	// Pointer to an array containing adjacency lists 
	list<int> *adj; 

	// A function used by DFS 
	void DFSUtil(int v, bool visited[]); 
public: 
	Graph(int V); // Constructor 
	void addEdge(int v, int w); 
	void connectedComponents(); 
}; 

// Method to print connected components in an 
// undirected graph 
void Graph::connectedComponents() 
{ 
	// Mark all the vertices as not visited 
	bool *visited = new bool[V]; 
	for(int v = 0; v < V; v++) 
		visited[v] = false; 

	for (int v=0; v<V; v++) 
	{ 
		if (visited[v] == false) 
		{ 
			// print all reachable vertices 
			// from v 
			DFSUtil(v, visited); 

			cout << "\n"; 
		} 
	} 
} 

void Graph::DFSUtil(int v, bool visited[]) 
{ 
	// Mark the current node as visited and print it 
	visited[v] = true; 
	cout << v << " "; 

	// Recur for all the vertices 
	// adjacent to this vertex 
	list<int>::iterator i; 
	for(i = adj[v].begin(); i != adj[v].end(); ++i) 
		if(!visited[*i]) 
			DFSUtil(*i, visited); 
} 

Graph::Graph(int V) 
{ 
	this->V = V; 
	adj = new list<int>[V]; 
} 

// method to add an undirected edge 
void Graph::addEdge(int v, int w) 
{ 
	adj[v].push_back(w); 
	adj[w].push_back(v); 
} 

// Drive program to test above 
int main() 
{ 
	// Create a graph given in the above diagram 
	Graph g(5); // 5 vertices numbered from 0 to 4 
	g.addEdge(1, 0); 
	g.addEdge(2, 3); 
	g.addEdge(3, 4); 

	cout << "Following are connected components \n"; 
	g.connectedComponents(); 

	return 0; 
} 
//----------------------------------------------------------------------
# Python program to print connected 
# components in an undirected graph 
class Graph: 
	
	# init function to declare class variables 
	def __init__(self,V): 
		self.V = V 
		self.adj = [[] for i in range(V)] 

	def DFSUtil(self, temp, v, visited): 

		# Mark the current vertex as visited 
		visited[v] = True

		# Store the vertex to list 
		temp.append(v) 

		# Repeat for all vertices adjacent 
		# to this vertex v 
		for i in self.adj[v]: 
			if visited[i] == False: 
				
				# Update the list 
				temp = self.DFSUtil(temp, i, visited) 
		return temp 

	# method to add an undirected edge 
	def addEdge(self, v, w): 
		self.adj[v].append(w) 
		self.adj[w].append(v) 

	# Method to retrieve connected components 
	# in an undirected graph 
	def connectedComponents(self): 
		visited = [] 
		cc = [] 
		for i in range(self.V): 
			visited.append(False) 
		for v in range(self.V): 
			if visited[v] == False: 
				temp = [] 
				cc.append(self.DFSUtil(temp, v, visited)) 
		return cc 

# Driver Code 
if __name__=="__main__": 
	
	# Create a graph given in the above diagram 
	# 5 vertices numbered from 0 to 4 
	g = Graph(5); 
	g.addEdge(1, 0) 
	g.addEdge(2, 3) 
	g.addEdge(3, 4) 
	cc = g.connectedComponents() 
	print("Following are connected components") 
	print(cc) 

# This code is contributed by Abhishek Valsan 
//----------------------------------------------------------------------
// C++ Program to count islands in boolean 2D matrix 
#include <bits/stdc++.h> 
using namespace std; 

#define ROW 5 
#define COL 5 

// A function to check if a given 
// cell (row, col) can be included in DFS 
int isSafe(int M[][COL], int row, int col, 
		bool visited[][COL]) 
{ 
	// row number is in range, column 
	// number is in range and value is 1 
	// and not yet visited 
	return (row >= 0) && (row < ROW) && (col >= 0) && (col < COL) && (M[row][col] && !visited[row][col]); 
} 

// A utility function to do DFS for a 
// 2D boolean matrix. It only considers 
// the 8 neighbours as adjacent vertices 
void DFS(int M[][COL], int row, int col, 
		bool visited[][COL]) 
{ 
	// These arrays are used to get 
	// row and column numbers of 8 
	// neighbours of a given cell 
	static int rowNbr[] = { -1, -1, -1, 0, 0, 1, 1, 1 }; 
	static int colNbr[] = { -1, 0, 1, -1, 1, -1, 0, 1 }; 

	// Mark this cell as visited 
	visited[row][col] = true; 

	// Recur for all connected neighbours 
	for (int k = 0; k < 8; ++k) 
		if (isSafe(M, row + rowNbr[k], col + colNbr[k], visited)) 
			DFS(M, row + rowNbr[k], col + colNbr[k], visited); 
} 

// The main function that returns 
// count of islands in a given boolean 
// 2D matrix 
int countIslands(int M[][COL]) 
{ 
	// Make a bool array to mark visited cells. 
	// Initially all cells are unvisited 
	bool visited[ROW][COL]; 
	memset(visited, 0, sizeof(visited)); 

	// Initialize count as 0 and 
	// travese through the all cells of 
	// given matrix 
	int count = 0; 
	for (int i = 0; i < ROW; ++i) 
		for (int j = 0; j < COL; ++j) 

			// If a cell with value 1 is not 
			if (M[i][j] && !visited[i][j]) { 
				// visited yet, then new island found 
				// Visit all cells in this island. 
				DFS(M, i, j, visited); 

				// and increment island count 
				++count; 
			} 

	return count; 
} 

// Driver code 
int main() 
{ 
	int M[][COL] = { { 1, 1, 0, 0, 0 }, 
					{ 0, 1, 0, 0, 1 }, 
					{ 1, 0, 0, 1, 1 }, 
					{ 0, 0, 0, 0, 0 }, 
					{ 1, 0, 1, 0, 1 } }; 

	cout << "Number of islands is: " << countIslands(M); 

	return 0; 
} 

// This is code is contributed by rathbhupendra 
//-------------------------------------------------
# Program to count islands in boolean 2D matrix 
class Graph: 

	def __init__(self, row, col, g): 
		self.ROW = row 
		self.COL = col 
		self.graph = g 

	# A function to check if a given cell 
	# (row, col) can be included in DFS 
	def isSafe(self, i, j, visited): 
		# row number is in range, column number 
		# is in range and value is 1 
		# and not yet visited 
		return (i >= 0 and i < self.ROW and
				j >= 0 and j < self.COL and
				not visited[i][j] and self.graph[i][j]) 
			

	# A utility function to do DFS for a 2D 
	# boolean matrix. It only considers 
	# the 8 neighbours as adjacent vertices 
	def DFS(self, i, j, visited): 

		# These arrays are used to get row and 
		# column numbers of 8 neighbours 
		# of a given cell 
		rowNbr = [-1, -1, -1, 0, 0, 1, 1, 1]; 
			colNbr = [-1, 0, 1, -1, 1, -1, 0, 1]; 
		
		# Mark this cell as visited 
		visited[i][j] = True

		# Recur for all connected neighbours 
		for k in range(8): 
			if self.isSafe(i + rowNbr[k], j + colNbr[k], visited): 
				self.DFS(i + rowNbr[k], j + colNbr[k], visited) 


	# The main function that returns 
	# count of islands in a given boolean 
	# 2D matrix 
	def countIslands(self): 
		# Make a bool array to mark visited cells. 
		# Initially all cells are unvisited 
		visited = [[False for j in range(self.COL)]for i in range(self.ROW)] 

		# Initialize count as 0 and travese 
		# through the all cells of 
		# given matrix 
		count = 0
		for i in range(self.ROW): 
			for j in range(self.COL): 
				# If a cell with value 1 is not visited yet, 
				# then new island found 
				if visited[i][j] == False and self.graph[i][j] == 1: 
					# Visit all cells in this island 
					# and increment island count 
					self.DFS(i, j, visited) 
					count += 1

		return count 


graph = [[1, 1, 0, 0, 0], 
		[0, 1, 0, 0, 1], 
		[1, 0, 0, 1, 1], 
		[0, 0, 0, 0, 0], 
		[1, 0, 1, 0, 1]] 


row = len(graph) 
col = len(graph[0]) 

g = Graph(row, col, graph) 

print "Number of islands is:"
print g.countIslands() 

# This code is contributed by Neelam Yadav 
//--------------------------------------------------



// SET2 (number of islands) using disjoint Set
// C++ program to fnd number of islands 
// using Disjoint Set data structure. 
#include <bits/stdc++.h> 
using namespace std; 

// Class to represent 
// Disjoint Set Data structure 
class DisjointUnionSets 
{ 
	
	vector<int> rank, parent; 
	int n; 
	
	public: 
	DisjointUnionSets(int n) 
	{ 
		rank.resize(n); 
		parent.resize(n); 
		this->n = n; 
		makeSet(); 
	} 

	void makeSet() 
	{ 
		// Initially, all elements 
		// are in their own set. 
		for (int i = 0; i < n; i++) 
			parent[i] = i; 
	} 

	// Finds the representative of the set 
	// that x is an element of 
	int find(int x) 
	{ 
		if (parent[x] != x) 
		{ 
			// if x is not the parent of itself, 
			// then x is not the representative of 
			// its set. 
			// so we recursively call Find on its parent 
			// and move i's node directly under the 
			// representative of this set 
			return find(parent[x]); 
		} 

		return x; 
	} 

	// Unites the set that includes x and the set 
	// that includes y 
	void Union(int x, int y) 
	{ 
		// Find the representatives(or the root nodes) 
		// for x an y 
		int xRoot = find(x); 
		int yRoot = find(y); 

		// Elements are in the same set, 
		// no need to unite anything. 
		if (xRoot == yRoot) 
			return; 

		// If x's rank is less than y's rank 
		// Then move x under y so that 
		// depth of tree remains less 
		if (rank[xRoot] < rank[yRoot]) 
			parent[xRoot] = yRoot; 

		// Else if y's rank is less than x's rank 
		// Then move y under x so that depth of tree 
		// remains less 
		else if (rank[yRoot] < rank[xRoot]) 
			parent[yRoot] = xRoot; 

		else // Else if their ranks are the same 
		{ 
			// Then move y under x (doesn't matter 
			// which one goes where) 
			parent[yRoot] = xRoot; 

			// And increment the the result tree's 
			// rank by 1 
			rank[xRoot] = rank[xRoot] + 1; 
		} 
	} 
}; 

// Returns number of islands in a[][] 
int countIslands(vector<vector<int>>a) 
{ 
	int n = a.size(); 
	int m = a[0].size(); 

	DisjointUnionSets *dus = new DisjointUnionSets(n * m); 

	/* The following loop checks for its neighbours 
	and unites the indexes if both are 1. */
	for (int j = 0; j < n; j++) 
	{ 
		for (int k = 0; k < m; k++) 
		{ 
			// If cell is 0, nothing to do 
			if (a[j][k] == 0) 
				continue; 

			// Check all 8 neighbours and do a Union 
			// with neighbour's set if neighbour is 
			// also 1 
			if (j + 1 < n && a[j + 1][k] == 1) 
				dus->Union(j * (m) + k, 
						(j + 1) * (m) + k); 
			if (j - 1 >= 0 && a[j - 1][k] == 1) 
				dus->Union(j * (m) + k, 
						(j - 1) * (m) + k); 
			if (k + 1 < m && a[j][k + 1] == 1) 
				dus->Union(j * (m) + k, 
						(j) * (m) + k + 1); 
			if (k - 1 >= 0 && a[j][k - 1] == 1) 
				dus->Union(j * (m) + k, 
						(j) * (m) + k - 1); 
			if (j + 1 < n && k + 1 < m && 
					a[j + 1][k + 1] == 1) 
				dus->Union(j * (m) + k, 
						(j + 1) * (m) + k + 1); 
			if (j + 1 < n && k - 1 >= 0 && 
					a[j + 1][k - 1] == 1) 
				dus->Union(j * m + k, 
						(j + 1) * (m) + k - 1); 
			if (j - 1 >= 0 && k + 1 < m && 
					a[j - 1][k + 1] == 1) 
				dus->Union(j * m + k, 
						(j - 1) * m + k + 1); 
			if (j - 1 >= 0 && k - 1 >= 0 && 
					a[j - 1][k - 1] == 1) 
				dus->Union(j * m + k, 
						(j - 1) * m + k - 1); 
		} 
	} 

	// Array to note down frequency of each set 
	int *c = new int[n * m]; 
	int numberOfIslands = 0; 
	for (int j = 0; j < n; j++) 
	{ 
		for (int k = 0; k < m; k++) 
		{ 
			if (a[j][k] == 1) 
			{ 
				int x = dus->find(j * m + k); 

				// If frequency of set is 0, 
				// increment numberOfIslands 
				if (c[x] == 0) 
				{ 
					numberOfIslands++; 
					c[x]++; 
				} 

				else
					c[x]++; 
			} 
		} 
	} 
	return numberOfIslands; 
} 

// Driver Code 
int main(void) 
{ 
	vector<vector<int>>a = {{1, 1, 0, 0, 0}, 
							{0, 1, 0, 0, 1}, 
							{1, 0, 0, 1, 1}, 
							{0, 0, 0, 0, 0}, 
							{1, 0, 1, 0, 1}}; 
	cout << "Number of Islands is: "
		<< countIslands(a) << endl; 
} 

// This code is contributed by ankush_953 
# Python3 program to find 
# the number of islands using 
# Disjoint Set data structure. 

# Class to represent 
# Disjoint Set Data structure 
class DisjointUnionSets: 
	def __init__(self, n): 
		self.rank = [0] * n 
		self.parent = [0] * n 
		self.n = n 
		self.makeSet() 

	def makeSet(self): 
		
		# Initially, all elements are in their 
		# own set. 
		for i in range(self.n): 
			self.parent[i] = i 

	# Finds the representative of the set that x 
	# is an element of 
	def find(self, x): 
		if (self.parent[x] != x): 

			# if x is not the parent of itself, 
			# then x is not the representative of 
			# its set. 
			# so we recursively call Find on its parent 
			# and move i's node directly under the 
			# representative of this set 
			return self.find(self.parent[x]) 
		return x 

	# Unites the set that includes x and 
	# the set that includes y 
	def Union(self, x, y): 
		
		# Find the representatives(or the root nodes) 
		# for x an y 
		xRoot = self.find(x) 
		yRoot = self.find(y) 

		# Elements are in the same set, 
		# no need to unite anything. 
		if xRoot == yRoot: 
			return

		# If x's rank is less than y's rank 
		# Then move x under y so that depth of tree 
		# remains less 
		if self.rank[xRoot] < self.rank[yRoot]: 
			parent[xRoot] = yRoot 

		# Else if y's rank is less than x's rank 
		# Then move y under x so that depth of tree 
		# remains less 
		elif self.rank[yRoot] < self.rank[xRoot]: 
			self.parent[yRoot] = xRoot 

		else: 
			
			# Else if their ranks are the same 
			# Then move y under x (doesn't matter 
			# which one goes where) 
			self.parent[yRoot] = xRoot 

			# And increment the the result tree's 
			# rank by 1 
			self.rank[xRoot] = self.rank[xRoot] + 1

# Returns number of islands in a[][] 
def countIslands(a): 
	n = len(a) 
	m = len(a[0]) 

	dus = DisjointUnionSets(n * m) 

	# The following loop checks for its neighbours 
	# and unites the indexes if both are 1. 
	for j in range(0, n): 
		for k in range(0, m): 

			# If cell is 0, nothing to do 
			if a[j][k] == 0: 
				continue

			# Check all 8 neighbours and do a Union 
			# with neighbour's set if neighbour is 
			# also 1 
			if j + 1 < n and a[j + 1][k] == 1: 
				dus.Union(j * (m) + k, 
						(j + 1) * (m) + k) 
			if j - 1 >= 0 and a[j - 1][k] == 1: 
				dus.Union(j * (m) + k, 
						(j - 1) * (m) + k) 
			if k + 1 < m and a[j][k + 1] == 1: 
				dus.Union(j * (m) + k, 
						(j) * (m) + k + 1) 
			if k - 1 >= 0 and a[j][k - 1] == 1: 
				dus.Union(j * (m) + k, 
						(j) * (m) + k - 1) 
			if (j + 1 < n and k + 1 < m and
					a[j + 1][k + 1] == 1): 
				dus.Union(j * (m) + k, (j + 1) *
							(m) + k + 1) 
			if (j + 1 < n and k - 1 >= 0 and
					a[j + 1][k - 1] == 1): 
				dus.Union(j * m + k, (j + 1) *
							(m) + k - 1) 
			if (j - 1 >= 0 and k + 1 < m and
					a[j - 1][k + 1] == 1): 
				dus.Union(j * m + k, (j - 1) *
							m + k + 1) 
			if (j - 1 >= 0 and k - 1 >= 0 and
					a[j - 1][k - 1] == 1): 
				dus.Union(j * m + k, (j - 1) *
							m + k - 1) 

	# Array to note down frequency of each set 
	c = [0] * (n * m) 
	numberOfIslands = 0
	for j in range(n): 
		for k in range(n): 
			if a[j][k] == 1: 
				x = dus.find(j * m + k) 
				
				# If frequency of set is 0, 
				# increment numberOfIslands 
				if c[x] == 0: 
					numberOfIslands += 1
					c[x] += 1
				else: 
					c[x] += 1
	return numberOfIslands 

# Driver Code 
a = [[1, 1, 0, 0, 0], 
	[0, 1, 0, 0, 1], 
	[1, 0, 0, 1, 1], 
	[0, 0, 0, 0, 0], 
	[1, 0, 1, 0, 1]] 
print("Number of Islands is:", countIslands(a)) 

# This code is contributed by ankush_953 

// BFS
// A BFS based solution to count number of 
// islands in a graph. 
#include <bits/stdc++.h> 
using namespace std; 

// R x C matrix 
#define R 5 
#define C 5 

// A function to check if a given cell 
// (u, v) can be included in DFS 
bool isSafe(int mat[R][C], int i, int j, 
			bool vis[R][C]) 
{ 
	return (i >= 0) && (i < R) && 
		(j >= 0) && (j < C) && 
		(mat[i][j] && !vis[i][j]); 
} 

void BFS(int mat[R][C], bool vis[R][C], 
		int si, int sj) 
{ 

	// These arrays are used to get row and 
	// column numbers of 8 neighbours of 
	// a given cell 
	int row[] = { -1, -1, -1, 0, 0, 1, 1, 1 }; 
	int col[] = { -1, 0, 1, -1, 1, -1, 0, 1 }; 

	// Simple BFS first step, we enqueue 
	// source and mark it as visited 
	queue<pair<int, int> > q; 
	q.push(make_pair(si, sj)); 
	vis[si][sj] = true; 

	// Next step of BFS. We take out 
	// items one by one from queue and 
	// enqueue their univisited adjacent 
	while (!q.empty()) { 

		int i = q.front().first; 
		int j = q.front().second; 
		q.pop(); 

		// Go through all 8 adjacent 
		for (int k = 0; k < 8; k++) { 
			if (isSafe(mat, i + row[k], 
					j + col[k], vis)) { 
			vis[i + row[k]][j + col[k]] = true; 
			q.push(make_pair(i + row[k], j + col[k])); 
			} 
		} 
	} 
} 

// This function returns number islands (connected 
// components) in a graph. It simply works as 
// BFS for disconnected graph and returns count 
// of BFS calls. 
int countIslands(int mat[R][C]) 
{ 
	// Mark all cells as not visited 
	bool vis[R][C]; 
	memset(vis, 0, sizeof(vis)); 

	// Call BFS for every unvisited vertex 
	// Whenever we see an univisted vertex, 
	// we increment res (number of islands) 
	// also. 
	int res = 0; 
	for (int i = 0; i < R; i++) { 
		for (int j = 0; j < C; j++) { 
			if (mat[i][j] && !vis[i][j]) { 
				BFS(mat, vis, i, j); 
				res++; 
			} 
		} 
	} 

	return res; 
} 

// main function 
int main() 
{ 
	int mat[][C] = { { 1, 1, 0, 0, 0 }, 
					{ 0, 1, 0, 0, 1 }, 
					{ 1, 0, 0, 1, 1 }, 
					{ 0, 0, 0, 0, 0 }, 
					{ 1, 0, 1, 0, 1 } }; 

	cout << countIslands(mat); 

	return 0; 
} 




