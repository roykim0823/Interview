How to approach Object-Oriented Design Questions
1. Handle Ambiguity
	Object-oriented design (OOD) questions are often intentially vague in order to test
	whether you'll make assumptions or if you'll ask clarifying questions. After all,
	a developer who just codes something without understanding what she is expected to 
	create wastes the company's time and money, and may create much more serious issues.

	When being asked an object-oriented design question, you should inquire 
		"who is going to use it"
		"how they are going to use it"
	Depending on the question, you may even wnat to go through the "six Ws":
		who, what, where, when, how, why.
	
	For example, suppose you were asked to describe the object-oriented design for a 
	coffee maker. This seems straightforward enough, right? Not quite.

	Your coffee maker might be an industrial machine designed to be used in a massive 
	restaurant servicing hundreds of customers per hour and making ten different kinds
	of coffee products. Or it might be a very simple machine, designed to be used by
	the elderly for just simple black coffee. These use cases will significantly impact
	your design.

2. Define the Core Object
	Now that we understand what we're designing, we should consider what the "core objects"
	in a system are. For example, suppose we are asked to do the object-oriented design for
	a restaurant. Our core objects might be things like Table, Guest, Party, Order, Meal, 
	Employee, Server, and Host.

3. Analyze Relationships
	Having more or less decided on our core objects, we now want to analyze the relationships
	between the objects. Which objects are members of which other objects? Do any objects 
	inherit from any others? Are relationships many-to-many or one-to-many?

	For example, in the restaurant question, we may come up with the following design:
		- Party should have an array of Guests.
		- Server and Host inherit from Employee.
		- Each Table has one Party, but each Party may have multiple Tables.
		- There is one Host for the Restaurant.
	
	Be very careful here- you can often make incorrect assumptions. For example, a single
	Table may have multiple Parties (as is common in the trendy "communal tables" at some
	restaurants). You should talk to your interviewer about how general purpose your design
	should be.

4. Investigate Actions
	At this point, you should have the basic outline of your object-oriented design. What
	remains is to consider the key actions that the objects will take and how they relate to
	each other. You may find out that you have forgotten some objects, and you will need to
	update your design

	For example, a Party walks into the Restaurant, and a Guest requests a Table from the 
	Host. The Host looks up the Reservation and, if it exists, assigns the Party to a Table.
	Otherwise, the Party is added to the end of the list. When a Party leaves, the Table is
	freed and assigned to a new Party in the list.

Design:
	Because interviewers are trying to test your capabilities and not your knowledge, design
	patterns are mostly beyond the scope of an interview. However, the Singleton and Factory
	Method design patterns are especially useful for interviews, so we will cover them here.

	There are far more design patterns than this book could possibly discuss. A fantastic way 
	to improve your software engineering skills is to pick up a book that focuses on this area
	specifically.

	Singleton Class
		The Singleton pattern ensures that a class has only one instance and ensures access to
		the instance through the application. It can be useful in cases where you have a "global"
		object with exactly one instance. For example, we may want to implement Restaurant such
		that it hs exactly one instance of Restaurant.
			public class Restaurant {
				private static Restaurant _instance = null;
				public static Restaurant getInstance() {
					if (_instance == null) {
						_instance = new Restaurant();
					}
					return _instance;
				}
			}
	
	Factory Method
		The Factory Method offers an interface for creating an instance of a class, with its
		subclasses deciding which class to instantiate. You might want to implement this with
		the creator class being abstract and not providing an implementation for the Factory
		method. Or, you could have the Creator class be a concrete class that provides an 
		implementation for the Factory method. In this case, the Factory method would take a
		parameter representing which class to instantiate.
			public class CardGame {
				public static CardGame createCardGame(GameType type) {
					if (type == GameType.Poker) {
						return new PokerGame();
					} else if (type == GameType.BlackJack) {
						return new BlackJackGame();
					}
					return null
				}
			}

